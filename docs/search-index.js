var N = null;var searchIndex = {};
searchIndex["plugin"]={"doc":"","items":[[5,"Load","plugin","",N,N],[5,"Unload","","",N,[[]]],[5,"AmxLoad","","",N,N],[5,"AmxUnload","","",N,N],[5,"Supports","","",N,[[],["u32"]]]],"paths":[]};
searchIndex["samp"]={"doc":"samp is a tool to develop plugins for samp servers written…","items":[[0,"args","samp","Workaround to parse input of natives functions.",N,N],[3,"Args","samp::args","A wrapper of a list of arguments of a native function.",N,N],[0,"cell","samp","Different smart-pointers to work around raw AMX values.",N,N],[0,"buffer","samp::cell","Contains types to interact with AMX arrays.",N,N],[3,"Buffer","samp::cell::buffer","Contains a pointer to sequence of `Amx` cells.",N,N],[3,"UnsizedBuffer","","It's more like a temorary buffer that comes from AMX when…",N,N],[0,"repr","samp::cell","A module to discribe how AMX cells work.",N,N],[8,"AmxCell","samp::cell::repr","AmxCell trait is a core trait of whole SDK. It shows that…",N,N],[11,"from_raw","","",0,[[["amx"],["i32"]],["result",["amxerror"]]]],[10,"as_cell","","Get a value which can be passed to AMX.",0,[[["self"]],["i32"]]],[8,"AmxPrimitive","","A marker showing that a value can be stored directly on a…",N,N],[0,"string","samp::cell","String interperation inside an AMX.",N,N],[3,"AmxString","samp::cell::string","",N,N],[5,"put_in_buffer","","Fill a buffer with given string.",N,[[["buffer"],["str"]],["result",["amxerror"]]]],[3,"Ref","samp::cell","A reference to a cell in the [`Amx`].",N,N],[0,"consts","samp","Default AMX constants.",N,N],[3,"Supports","samp::consts","",N,N],[4,"ServerData","","Offsets",N,N],[13,"Logprintf","","",1,N],[13,"AmxExports","","",1,N],[13,"CallPublicFs","","",1,N],[13,"CallPublicGm","","",1,N],[3,"AmxFlags","","",N,N],[4,"AmxExecIdx","","Index of an AMX function in memory.",N,N],[13,"Main","","",2,N],[13,"Continue","","",2,N],[13,"UserDef","","",2,N],[0,"error","samp","Work with AMX errors.",N,N],[6,"AmxResult","samp::error","A specialized [`Result`] type for operations on AMX.",N,N],[4,"AmxError","","Error type returned by AMX functions (origin amx_*).",N,N],[13,"Exit","","",3,N],[13,"Assert","","",3,N],[13,"StackError","","",3,N],[13,"Bounds","","",3,N],[13,"MemoryAccess","","",3,N],[13,"InvalidInstruction","","",3,N],[13,"StackLow","","",3,N],[13,"HeapLow","","",3,N],[13,"Callback","","",3,N],[13,"Native","","",3,N],[13,"Divide","","",3,N],[13,"Sleep","","",3,N],[13,"InvalidState","","",3,N],[13,"Memory","","",3,N],[13,"Format","","",3,N],[13,"Version","","",3,N],[13,"NotFound","","",3,N],[13,"Index","","",3,N],[13,"Debug","","",3,N],[13,"Init","","",3,N],[13,"UserData","","",3,N],[13,"InitJit","","",3,N],[13,"Params","","",3,N],[13,"Domain","","",3,N],[13,"General","","",3,N],[13,"Overlay","","",3,N],[13,"Unknown","","",3,N],[0,"exports","samp","Types to get exported functions by AMX.",N,N],[8,"Export","samp::exports","",N,N],[16,"Output","","",4,N],[18,"OFFSET","","",4,N],[10,"from_table","","",4,N],[3,"Align16","","",N,N],[3,"Align32","","",N,N],[3,"Allot","","",N,N],[3,"Callback","","",N,N],[3,"Cleanup","","",N,N],[3,"Clone","","",N,N],[3,"Exec","","",N,N],[3,"FindNative","","",N,N],[3,"FindPublic","","",N,N],[3,"FindPubVar","","",N,N],[3,"FindTagId","","",N,N],[3,"Flags","","",N,N],[3,"GetAddr","","",N,N],[3,"GetNative","","",N,N],[3,"GetPublic","","",N,N],[3,"GetPubVar","","",N,N],[3,"GetString","","",N,N],[3,"GetTag","","",N,N],[3,"GetUserData","","",N,N],[3,"Init","","",N,N],[3,"InitJIT","","",N,N],[3,"MemInfo","","",N,N],[3,"NameLength","","",N,N],[3,"NativeInfo","","",N,N],[3,"NumNatives","","",N,N],[3,"NumPublics","","",N,N],[3,"NumPubVars","","",N,N],[3,"NumTags","","",N,N],[3,"Push","","",N,N],[3,"PushArray","","",N,N],[3,"PushString","","",N,N],[3,"RaiseError","","",N,N],[3,"Register","","",N,N],[3,"Release","","",N,N],[3,"SetCallback","","",N,N],[3,"SetDebugHook","","",N,N],[3,"SetString","","",N,N],[3,"SetUserData","","",N,N],[3,"StrLen","","",N,N],[3,"UTF8Check","","",N,N],[3,"UTF8Get","","",N,N],[3,"UTF8Len","","",N,N],[3,"UTF8Put","","",N,N],[4,"Exports","","List of `amx_*` functions exported via the extern `Load`…",N,N],[13,"Align16","","",5,N],[13,"Align32","","",5,N],[13,"Align64","","",5,N],[13,"Allot","","",5,N],[13,"Callback","","",5,N],[13,"Cleanup","","",5,N],[13,"Clone","","",5,N],[13,"Exec","","",5,N],[13,"FindNative","","",5,N],[13,"FindPublic","","",5,N],[13,"FindPubVar","","",5,N],[13,"FindTagId","","",5,N],[13,"Flags","","",5,N],[13,"GetAddr","","",5,N],[13,"GetNative","","",5,N],[13,"GetPublic","","",5,N],[13,"GetPubVar","","",5,N],[13,"GetString","","",5,N],[13,"GetTag","","",5,N],[13,"GetUserData","","",5,N],[13,"Init","","",5,N],[13,"InitJIT","","",5,N],[13,"MemInfo","","",5,N],[13,"NameLength","","",5,N],[13,"NativeInfo","","",5,N],[13,"NumNatives","","",5,N],[13,"NumPublics","","",5,N],[13,"NumPubVars","","",5,N],[13,"NumTags","","",5,N],[13,"Push","","",5,N],[13,"PushArray","","",5,N],[13,"PushString","","",5,N],[13,"RaiseError","","",5,N],[13,"Register","","",5,N],[13,"Release","","",5,N],[13,"SetCallback","","",5,N],[13,"SetDebugHook","","",5,N],[13,"SetString","","",5,N],[13,"SetUserData","","",5,N],[13,"StrLen","","",5,N],[13,"UTF8Check","","",5,N],[13,"UTF8Get","","",5,N],[13,"UTF8Len","","",5,N],[13,"UTF8Put","","",5,N],[0,"raw","samp","Raw C definitions of AMX sturcture.",N,N],[0,"functions","samp::raw","",N,N],[6,"AmxNative","samp::raw::functions","",N,N],[6,"AmxCallback","","",N,N],[6,"AmxDebug","","",N,N],[6,"Align16","","",N,N],[6,"Align32","","",N,N],[6,"Allot","","",N,N],[6,"Callback","","",N,N],[6,"Cleanup","","",N,N],[6,"Clone","","",N,N],[6,"Exec","","",N,N],[6,"FindNative","","",N,N],[6,"FindPublic","","",N,N],[6,"FindPubVar","","",N,N],[6,"FindTagId","","",N,N],[6,"Flags","","",N,N],[6,"GetAddr","","",N,N],[6,"GetNative","","",N,N],[6,"GetPublic","","",N,N],[6,"GetPubVar","","",N,N],[6,"GetString","","",N,N],[6,"GetTag","","",N,N],[6,"GetUserData","","",N,N],[6,"Init","","",N,N],[6,"InitJIT","","",N,N],[6,"MemInfo","","",N,N],[6,"NameLength","","",N,N],[6,"NativeInfo","","",N,N],[6,"NumNatives","","",N,N],[6,"NumPublics","","",N,N],[6,"NumPubVars","","",N,N],[6,"NumTags","","",N,N],[6,"Push","","",N,N],[6,"PushArray","","",N,N],[6,"PushString","","",N,N],[6,"RaiseError","","",N,N],[6,"Register","","",N,N],[6,"Release","","",N,N],[6,"SetCallback","","",N,N],[6,"SetDebugHook","","",N,N],[6,"SetString","","",N,N],[6,"SetUserData","","",N,N],[6,"StrLen","","",N,N],[6,"UTF8Check","","",N,N],[6,"UTF8Get","","",N,N],[6,"UTF8Len","","",N,N],[6,"UTF8Put","","",N,N],[6,"Logprintf","","",N,N],[0,"types","samp::raw","",N,N],[3,"AMX","samp::raw::types","",N,N],[12,"base","","",6,N],[12,"data","","",6,N],[12,"callback","","",6,N],[12,"debug","","",6,N],[12,"cip","","",6,N],[12,"frm","","",6,N],[12,"hea","","",6,N],[12,"hlw","","",6,N],[12,"stk","","",6,N],[12,"stp","","",6,N],[12,"flags","","",6,N],[12,"usertags","","",6,N],[12,"userdata","","",6,N],[12,"error","","",6,N],[12,"paramcount","","",6,N],[12,"pri","","",6,N],[12,"alt","","",6,N],[12,"reset_stk","","",6,N],[12,"reset_hea","","",6,N],[12,"sysreq_d","","",6,N],[3,"AMX_NATIVE_INFO","","",N,N],[12,"name","","",7,N],[12,"func","","",7,N],[3,"AMX_FUNCSTUB","","",N,N],[12,"address","","",8,N],[12,"name","","",8,N],[3,"ANX_FUNCSTUBNT","","",N,N],[12,"address","","",9,N],[12,"nameofs","","",9,N],[3,"AMX_HEADER","","",N,N],[12,"size","","",10,N],[12,"magic","","",10,N],[12,"file_version","","",10,N],[12,"amx_version","","",10,N],[12,"flags","","",10,N],[12,"defsize","","",10,N],[12,"cod","","",10,N],[12,"dat","","",10,N],[12,"hea","","",10,N],[12,"stp","","",10,N],[12,"cip","","",10,N],[12,"publics","","",10,N],[12,"natives","","",10,N],[12,"libraries","","",10,N],[12,"pubvars","","",10,N],[12,"tags","","",10,N],[12,"nametable","","",10,N],[14,"exec_public","samp","Execute a public AMX function by name.",N,N],[0,"encoding","","String encoding.",N,N],[5,"set_default_encoding","samp::encoding","",N,N],[7,"WINDOWS_1251","","The windows-1251 encoding.",N,N],[7,"WINDOWS_1252","","The windows-1252 encoding.",N,N],[0,"amx","samp","Core Amx types with additional functions.",N,N],[3,"Amx","samp::amx","A wrapper around a raw pointer to an AMX and exported…",N,N],[3,"Allocator","","AMX memory allocator (on the heap) that frees captured…",N,N],[3,"AmxIdent","","An unique identifier of an `Amx` instance.",N,N],[5,"get","","Get a reference to an `Amx` by given `AmxIdent`.",N,[[["amxident"]],["option",["amx"]]]],[8,"AmxExt","","Extended functional of an `Amx`.",N,N],[10,"ident","","Get an identifier of an `Amx`.",11,[[["self"]],["amxident"]]],[0,"plugin","samp","Contains a plugin interface.",N,N],[5,"enable_process_tick","samp::plugin","Enables process_tick function for a plugin.",N,[[]]],[5,"logger","","Get a fern [`Dispatch`] and disable auto installing logger.",N,[[],["dispatch"]]],[8,"SampPlugin","","An interface that should be implemented by any plugin.",N,N],[11,"on_load","","",12,[[["self"]]]],[11,"on_unload","","",12,[[["self"]]]],[11,"on_amx_load","","",12,[[["self"],["amx"]]]],[11,"on_amx_unload","","",12,[[["self"],["amx"]]]],[11,"process_tick","","",12,[[["self"]]]],[0,"prelude","samp","Most used imports.",N,N],[3,"Amx","samp::prelude","A wrapper around a raw pointer to an AMX and exported…",N,N],[8,"AmxCell","","AmxCell trait is a core trait of whole SDK. It shows that…",N,N],[11,"from_raw","","",0,[[["amx"],["i32"]],["result",["amxerror"]]]],[10,"as_cell","","Get a value which can be passed to AMX.",0,[[["self"]],["i32"]]],[3,"AmxString","","",N,N],[3,"Buffer","","Contains a pointer to sequence of `Amx` cells.",N,N],[3,"Ref","","A reference to a cell in the [`Amx`].",N,N],[3,"UnsizedBuffer","","It's more like a temorary buffer that comes from AMX when…",N,N],[6,"AmxResult","","A specialized [`Result`] type for operations on AMX.",N,N],[11,"into","samp::args","",13,[[["self"]],["u"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"into","samp::prelude","",14,[[["self"]],["u"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"to_string","","",16,[[["self"]],["string"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"into","samp::consts","",18,[[["self"]],["u"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"to_string","samp::error","",3,[[["self"]],["string"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","samp::exports","",20,[[["self"]],["u"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"into","","",60,[[["self"]],["u"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"into","","",61,[[["self"]],["u"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","samp::raw::types","",6,[[["self"]],["u"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"into","samp::prelude","",63,[[["self"]],["u"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"get_type_id","","",63,[[["self"]],["typeid"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"try_into","","",63,[[["self"]],["result"]]],[11,"into","samp::amx","",64,[[["self"]],["u"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"into","","",65,[[["self"]],["u"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"to_owned","","",65,[[["self"]],["t"]]],[11,"clone_into","","",65,N],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"deref_mut","samp::prelude","",17,[[["self"]],["t"]]],[11,"deref_mut","","",14,N],[11,"fmt","samp::error","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","samp::prelude","",16,[[["self"],["formatter"]],["result",["error"]]]],[11,"from_iter","samp::consts","",19,[[["t"]],["amxflags"]]],[11,"from_iter","","",18,[[["t"]],["supports"]]],[11,"partial_cmp","","",19,[[["self"],["amxflags"]],["option",["ordering"]]]],[11,"lt","","",19,[[["self"],["amxflags"]],["bool"]]],[11,"le","","",19,[[["self"],["amxflags"]],["bool"]]],[11,"gt","","",19,[[["self"],["amxflags"]],["bool"]]],[11,"ge","","",19,[[["self"],["amxflags"]],["bool"]]],[11,"partial_cmp","","",18,[[["self"],["supports"]],["option",["ordering"]]]],[11,"lt","","",18,[[["self"],["supports"]],["bool"]]],[11,"le","","",18,[[["self"],["supports"]],["bool"]]],[11,"gt","","",18,[[["self"],["supports"]],["bool"]]],[11,"ge","","",18,[[["self"],["supports"]],["bool"]]],[11,"bitxor_assign","","Toggles the set of flags.",19,N],[11,"bitxor_assign","","Toggles the set of flags.",18,N],[11,"not","","Returns the complement of this set of flags.",19,[[["self"]],["amxflags"]]],[11,"not","","Returns the complement of this set of flags.",18,[[["self"]],["supports"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"from_raw","samp::prelude","",15,[[["amx"],["i32"]],["result",["unsizedbuffer","amxerror"]]]],[11,"as_cell","","",15,[[["self"]],["i32"]]],[11,"from_raw","","",17,[[["amx"],["i32"]],["result",["ref","amxerror"]]]],[11,"as_cell","","",17,[[["self"]],["i32"]]],[11,"from_raw","","",16,[[["amx"],["i32"]],["result",["amxstring","amxerror"]]]],[11,"as_cell","","",16,[[["self"]],["i32"]]],[11,"as_cell","","",14,[[["self"]],["i32"]]],[11,"drop","samp::amx","",64,N],[11,"bitor_assign","samp::consts","Adds the set of flags.",18,N],[11,"bitor_assign","","Adds the set of flags.",19,N],[11,"bitand","","Returns the intersection between the two sets of flags.",18,[[["self"],["supports"]],["supports"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",19,[[["self"],["amxflags"]],["amxflags"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"cmp","","",19,[[["self"],["amxflags"]],["ordering"]]],[11,"cmp","","",18,[[["self"],["supports"]],["ordering"]]],[11,"hash","","",18,N],[11,"hash","","",19,N],[11,"bitor","","Returns the union of the two sets of flags.",18,[[["self"],["supports"]],["supports"]]],[11,"bitor","","Returns the union of the two sets of flags.",19,[[["self"],["amxflags"]],["amxflags"]]],[11,"eq","samp::exports","",5,[[["self"],["exports"]],["bool"]]],[11,"eq","samp::consts","",18,[[["self"],["supports"]],["bool"]]],[11,"ne","","",18,[[["self"],["supports"]],["bool"]]],[11,"eq","","",19,[[["self"],["amxflags"]],["bool"]]],[11,"ne","","",19,[[["self"],["amxflags"]],["bool"]]],[11,"eq","","",2,[[["self"],["amxexecidx"]],["bool"]]],[11,"ne","","",2,[[["self"],["amxexecidx"]],["bool"]]],[11,"eq","","",1,[[["self"],["serverdata"]],["bool"]]],[11,"deref","samp::prelude","",17,[[["self"]],["t"]]],[11,"deref","","",14,N],[11,"bitxor","samp::consts","Returns the left flags, but with all the right flags…",18,[[["self"],["supports"]],["supports"]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",19,[[["self"],["amxflags"]],["amxflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",18,N],[11,"sub_assign","","Disables all flags enabled in the set.",19,N],[11,"fmt","samp::prelude","",63,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","samp::consts","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","samp::error","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","samp::prelude","",14,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","samp::consts","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","samp::exports","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"bitand_assign","samp::consts","Disables all flags disabled in the set.",18,N],[11,"bitand_assign","","Disables all flags disabled in the set.",19,N],[11,"from","","",2,[[["i32"]],["amxexecidx"]]],[11,"from","samp::error","",3,[[["i32"]],["amxerror"]]],[11,"from_table","samp::exports","",37,N],[11,"from_table","","",40,N],[11,"from_table","","",21,N],[11,"from_table","","",50,N],[11,"from_table","","",31,N],[11,"from_table","","",22,N],[11,"from_table","","",30,N],[11,"from_table","","",56,N],[11,"from_table","","",47,N],[11,"from_table","","",24,N],[11,"from_table","","",53,N],[11,"from_table","","",44,N],[11,"from_table","","",39,N],[11,"from_table","","",60,N],[11,"from_table","","",49,N],[11,"from_table","","",41,N],[11,"from_table","","",54,N],[11,"from_table","","",23,N],[11,"from_table","","",57,N],[11,"from_table","","",35,N],[11,"from_table","","",45,N],[11,"from_table","","",52,N],[11,"from_table","","",34,N],[11,"from_table","","",61,N],[11,"from_table","","",48,N],[11,"from_table","","",26,N],[11,"from_table","","",38,N],[11,"from_table","","",46,N],[11,"from_table","","",36,N],[11,"from_table","","",62,N],[11,"from_table","","",29,N],[11,"from_table","","",55,N],[11,"from_table","","",28,N],[11,"from_table","","",20,N],[11,"from_table","","",59,N],[11,"from_table","","",32,N],[11,"from_table","","",43,N],[11,"from_table","","",58,N],[11,"from_table","","",51,N],[11,"from_table","","",42,N],[11,"from_table","","",27,N],[11,"from_table","","",25,N],[11,"from_table","","",33,N],[11,"fmt","samp::consts","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",18,[[["self"]],["supports"]]],[11,"clone","samp::exports","",5,[[["self"]],["exports"]]],[11,"clone","samp::consts","",1,[[["self"]],["serverdata"]]],[11,"clone","","",19,[[["self"]],["amxflags"]]],[11,"clone","","",2,[[["self"]],["amxexecidx"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",19,[[["self"],["amxflags"]],["amxflags"]]],[11,"sub","","Returns the set difference of the two sets of flags.",18,[[["self"],["supports"]],["supports"]]],[11,"extend","","",19,N],[11,"extend","","",18,N],[11,"ident","samp::prelude","",63,[[["self"]],["amxident"]]],[11,"clone","samp::amx","",65,[[["self"]],["amxident"]]],[11,"eq","","",65,[[["self"],["amxident"]],["bool"]]],[11,"ne","","",65,[[["self"],["amxident"]],["bool"]]],[11,"from","","",65,N],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"hash","","",65,N],[11,"new","samp::args","Creates a list from [`Amx`] and arguments.",13,N],[11,"next","","Return the next argument in the list (like an iterator).",13,[[["self"]],["option"]]],[11,"get","","Get an argument by position, if there is no argument in…",13,[[["self"],["usize"]],["option"]]],[11,"reset","","Reset a read offset for [`next()`] method.",13,N],[11,"count","","Get count of arguments in the list.",13,[[["self"]],["usize"]]],[11,"new","samp::prelude","Create a buffer from a reference to its first element.",14,[[["ref",["i32"]],["usize"]],["buffer"]]],[11,"as_slice","","Extracts a slice containing the entire buffer.",14,N],[11,"as_mut_slice","","Extracts a mutable slice of the entire buffer.",14,N],[11,"into_sized_buffer","","Convert `UnsizedBuffer` into `Buffer` with given length.",15,[[["self"],["usize"]],["buffer"]]],[11,"as_ptr","","Return a raw pointer to an inner value.",15,N],[11,"as_mut_ptr","","Return a mutable raw pointer to an inner value.",15,N],[11,"new","","Create a new AmxString from an allocated buffer and fill…",16,N],[11,"to_bytes","","Convert an AMX string to a `Vec<u8>`.",16,[[["self"]],["vec",["u8"]]]],[11,"to_string","","Convert an AMX string to a `String`. Only ASCII chars by…",16,[[["self"]],["string"]]],[11,"len","","Return a length of a string.",16,[[["self"]],["usize"]]],[11,"is_empty","","",16,[[["self"]],["bool"]]],[11,"bytes_len","","Return a length of a buffer of a string",16,[[["self"]],["usize"]]],[11,"new","","Create a new wrapper over an AMX cell.",17,N],[11,"address","","Get an inner AMX address to cell (not physical).",17,[[["self"]],["i32"]]],[11,"as_ptr","","Get a pointer to a memory cell.",17,N],[11,"as_mut_ptr","","Get a mutable pointer to a memory cell.",17,N],[18,"VERSION","samp::consts","",18,N],[18,"AMX_NATIVES","","",18,N],[18,"PROCESS_TICK","","",18,N],[11,"empty","","Returns an empty set of flags.",18,[[],["supports"]]],[11,"all","","Returns the set containing all flags.",18,[[],["supports"]]],[11,"bits","","Returns the raw value of the flags currently stored.",18,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",18,[[["u32"]],["option",["supports"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",18,[[["u32"]],["supports"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",18,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",18,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",18,[[["self"],["supports"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",18,[[["self"],["supports"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",18,N],[11,"remove","","Removes the specified flags in-place.",18,N],[11,"toggle","","Toggles the specified flags in-place.",18,N],[11,"set","","Inserts or removes the specified flags depending on the…",18,N],[18,"DEBUG","","",19,N],[18,"COMPACT","","",19,N],[18,"BYTEOPC","","",19,N],[18,"NOCHECKS","","",19,N],[18,"NTVREG","","",19,N],[18,"JITC","","",19,N],[18,"BROWSE","","",19,N],[18,"RELOC","","",19,N],[11,"empty","","Returns an empty set of flags.",19,[[],["amxflags"]]],[11,"all","","Returns the set containing all flags.",19,[[],["amxflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",19,[[["self"]],["u16"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",19,[[["u16"]],["option",["amxflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",19,[[["u16"]],["amxflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",19,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",19,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",19,[[["self"],["amxflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",19,[[["self"],["amxflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",19,N],[11,"remove","","Removes the specified flags in-place.",19,N],[11,"toggle","","Toggles the specified flags in-place.",19,N],[11,"set","","Inserts or removes the specified flags depending on the…",19,N],[11,"new","samp::prelude","Create an AMX wrapper.",63,N],[11,"register","","Register a list of plugin natives functions.",63,N],[11,"exec","","Execs an AMX function.",63,[[["self"],["amxexecidx"]],["result",["i32","amxerror"]]]],[11,"find_native","","Returns an index of a native by its name.",63,[[["self"],["str"]],["result",["i32","amxerror"]]]],[11,"find_public","","Returns an index of a public by its name.",63,[[["self"],["str"]],["result",["amxexecidx","amxerror"]]]],[11,"find_pubvar","","Returns a pointer to a public variable.",63,[[["self"],["str"]],["result",["ref","amxerror"]]]],[11,"flags","","Return flags of a compiled AMX.",63,[[["self"]],["result",["amxflags","amxerror"]]]],[11,"get_ref","","Get a reference ([`Ref<T>`]) to a value stored inside an…",63,[[["self"],["i32"]],["result",["ref","amxerror"]]]],[11,"push","","Push a value that implements [`AmxCell`] to an AMX stack.",63,[[["self"],["t"]],["result",["amxerror"]]]],[11,"allocator","","Get a heap [`Allocator`] for current [`Amx`].",63,[[["self"]],["allocator"]]],[11,"amx","","Returns a pointer to a raw [`AMX`] structure.",63,[[["self"]],["nonnull",["amx"]]]],[11,"header","","Returns a pointer to an [`AMX_HEADER`].",63,[[["self"]],["nonnull",["amx_header"]]]],[11,"allot","samp::amx","Allocate memory for a primitive value.",64,[[["self"],["t"]],["result",["ref","amxerror"]]]],[11,"allot_buffer","","Allocate custom sized buffer on the heap.",64,[[["self"],["usize"]],["result",["buffer","amxerror"]]]],[11,"allot_array","","Allocate an array on the heap, copy values from the passed…",64,N],[11,"allot_string","","Alocate a string, copy passed `&str` and return…",64,[[["self"],["str"]],["result",["amxstring","amxerror"]]]]],"paths":[[8,"AmxCell"],[4,"ServerData"],[4,"AmxExecIdx"],[4,"AmxError"],[8,"Export"],[4,"Exports"],[3,"AMX"],[3,"AMX_NATIVE_INFO"],[3,"AMX_FUNCSTUB"],[3,"ANX_FUNCSTUBNT"],[3,"AMX_HEADER"],[8,"AmxExt"],[8,"SampPlugin"],[3,"Args"],[3,"Buffer"],[3,"UnsizedBuffer"],[3,"AmxString"],[3,"Ref"],[3,"Supports"],[3,"AmxFlags"],[3,"Align16"],[3,"Align32"],[3,"Allot"],[3,"Callback"],[3,"Cleanup"],[3,"Clone"],[3,"Exec"],[3,"FindNative"],[3,"FindPublic"],[3,"FindPubVar"],[3,"FindTagId"],[3,"Flags"],[3,"GetAddr"],[3,"GetNative"],[3,"GetPublic"],[3,"GetPubVar"],[3,"GetString"],[3,"GetTag"],[3,"GetUserData"],[3,"Init"],[3,"InitJIT"],[3,"MemInfo"],[3,"NameLength"],[3,"NativeInfo"],[3,"NumNatives"],[3,"NumPublics"],[3,"NumPubVars"],[3,"NumTags"],[3,"Push"],[3,"PushArray"],[3,"PushString"],[3,"RaiseError"],[3,"Register"],[3,"Release"],[3,"SetCallback"],[3,"SetDebugHook"],[3,"SetString"],[3,"SetUserData"],[3,"StrLen"],[3,"UTF8Check"],[3,"UTF8Get"],[3,"UTF8Len"],[3,"UTF8Put"],[3,"Amx"],[3,"Allocator"],[3,"AmxIdent"]]};
searchIndex["samp_codegen"]={"doc":"","items":[[23,"native","samp_codegen","Generate C function that parses passed argument and calls…",N,N],[14,"initialize_plugin","","Generates common plugin C interface.",N,N]],"paths":[]};
searchIndex["samp_sdk"]={"doc":"","items":[[0,"amx","samp_sdk","Core Amx types.",N,N],[3,"Amx","samp_sdk::amx","A wrapper around a raw pointer to an AMX and exported…",N,N],[3,"Allocator","","AMX memory allocator (on the heap) that frees captured…",N,N],[11,"new","","Create an AMX wrapper.",0,N],[11,"register","","Register a list of plugin natives functions.",0,N],[11,"exec","","Execs an AMX function.",0,[[["self"],["amxexecidx"]],["amxresult",["i32"]]]],[11,"find_native","","Returns an index of a native by its name.",0,[[["self"],["str"]],["amxresult",["i32"]]]],[11,"find_public","","Returns an index of a public by its name.",0,[[["self"],["str"]],["amxresult",["amxexecidx"]]]],[11,"find_pubvar","","Returns a pointer to a public variable.",0,[[["self"],["str"]],["amxresult",["ref"]]]],[11,"flags","","Return flags of a compiled AMX.",0,[[["self"]],["amxresult",["amxflags"]]]],[11,"get_ref","","Get a reference ([`Ref<T>`]) to a value stored inside an…",0,[[["self"],["i32"]],["amxresult",["ref"]]]],[11,"push","","Push a value that implements [`AmxCell`] to an AMX stack.",0,[[["self"],["t"]],["amxresult"]]],[11,"allocator","","Get a heap [`Allocator`] for current [`Amx`].",0,[[["self"]],["allocator"]]],[11,"amx","","Returns a pointer to a raw [`AMX`] structure.",0,[[["self"]],["nonnull",["amx"]]]],[11,"header","","Returns a pointer to an [`AMX_HEADER`].",0,[[["self"]],["nonnull",["amx_header"]]]],[11,"allot","","Allocate memory for a primitive value.",1,[[["self"],["t"]],["amxresult",["ref"]]]],[11,"allot_buffer","","Allocate custom sized buffer on the heap.",1,[[["self"],["usize"]],["amxresult",["buffer"]]]],[11,"allot_array","","Allocate an array on the heap, copy values from the passed…",1,N],[11,"allot_string","","Alocate a string, copy passed `&str` and return…",1,[[["self"],["str"]],["amxresult",["amxstring"]]]],[0,"args","samp_sdk","Workaround to parse input of natives functions.",N,N],[3,"Args","samp_sdk::args","A wrapper of a list of arguments of a native function.",N,N],[11,"new","","Creates a list from [`Amx`] and arguments.",2,N],[11,"next","","Return the next argument in the list (like an iterator).",2,[[["self"]],["option"]]],[11,"get","","Get an argument by position, if there is no argument in…",2,[[["self"],["usize"]],["option"]]],[11,"reset","","Reset a read offset for [`next()`] method.",2,[[["self"]]]],[11,"count","","Get count of arguments in the list.",2,[[["self"]],["usize"]]],[0,"cell","samp_sdk","Different smart-pointers to work around raw AMX values.",N,N],[3,"Ref","samp_sdk::cell","A reference to a cell in the [`Amx`].",N,N],[0,"buffer","","Contains types to interact with AMX arrays.",N,N],[3,"Buffer","samp_sdk::cell::buffer","Contains a pointer to sequence of `Amx` cells.",N,N],[3,"UnsizedBuffer","","It's more like a temorary buffer that comes from AMX when…",N,N],[11,"new","","Create a buffer from a reference to its first element.",3,[[["ref",["i32"]],["usize"]],["buffer"]]],[11,"as_slice","","Extracts a slice containing the entire buffer.",3,N],[11,"as_mut_slice","","Extracts a mutable slice of the entire buffer.",3,N],[11,"into_sized_buffer","","Convert `UnsizedBuffer` into `Buffer` with given length.",4,[[["self"],["usize"]],["buffer"]]],[11,"as_ptr","","Return a raw pointer to an inner value.",4,N],[11,"as_mut_ptr","","Return a mutable raw pointer to an inner value.",4,N],[0,"repr","samp_sdk::cell","A module to discribe how AMX cells work.",N,N],[8,"AmxCell","samp_sdk::cell::repr","AmxCell trait is a core trait of whole SDK. It shows that…",N,N],[11,"from_raw","","",5,[[["amx"],["i32"]],["amxresult"]]],[10,"as_cell","","Get a value which can be passed to AMX.",5,[[["self"]],["i32"]]],[8,"AmxPrimitive","","A marker showing that a value can be stored directly on a…",N,N],[0,"string","samp_sdk::cell","String interperation inside an AMX.",N,N],[3,"AmxString","samp_sdk::cell::string","",N,N],[5,"put_in_buffer","","Fill a buffer with given string.",N,[[["buffer"],["str"]],["amxresult"]]],[11,"new","","Create a new AmxString from an allocated buffer and fill…",6,N],[11,"to_bytes","","Convert an AMX string to a `Vec<u8>`.",6,[[["self"]],["vec",["u8"]]]],[11,"to_string","","Convert an AMX string to a `String`. Only ASCII chars by…",6,[[["self"]],["string"]]],[11,"len","","Return a length of a string.",6,[[["self"]],["usize"]]],[11,"is_empty","","",6,[[["self"]],["bool"]]],[11,"bytes_len","","Return a length of a buffer of a string",6,[[["self"]],["usize"]]],[11,"new","samp_sdk::cell","Create a new wrapper over an AMX cell.",7,N],[11,"address","","Get an inner AMX address to cell (not physical).",7,[[["self"]],["i32"]]],[11,"as_ptr","","Get a pointer to a memory cell.",7,N],[11,"as_mut_ptr","","Get a mutable pointer to a memory cell.",7,N],[0,"consts","samp_sdk","Default AMX constants.",N,N],[3,"Supports","samp_sdk::consts","",N,N],[3,"AmxFlags","","",N,N],[4,"ServerData","","Offsets",N,N],[13,"Logprintf","","",8,N],[13,"AmxExports","","",8,N],[13,"CallPublicFs","","",8,N],[13,"CallPublicGm","","",8,N],[4,"AmxExecIdx","","Index of an AMX function in memory.",N,N],[13,"Main","","",9,N],[13,"Continue","","",9,N],[13,"UserDef","","",9,N],[18,"VERSION","","",10,N],[18,"AMX_NATIVES","","",10,N],[18,"PROCESS_TICK","","",10,N],[11,"empty","","Returns an empty set of flags.",10,[[],["supports"]]],[11,"all","","Returns the set containing all flags.",10,[[],["supports"]]],[11,"bits","","Returns the raw value of the flags currently stored.",10,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",10,[[["u32"]],["option",["supports"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",10,[[["u32"]],["supports"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",10,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",10,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",10,[[["self"],["supports"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",10,[[["self"],["supports"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",10,[[["self"],["supports"]]]],[11,"remove","","Removes the specified flags in-place.",10,[[["self"],["supports"]]]],[11,"toggle","","Toggles the specified flags in-place.",10,[[["self"],["supports"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",10,[[["self"],["supports"],["bool"]]]],[18,"DEBUG","","",11,N],[18,"COMPACT","","",11,N],[18,"BYTEOPC","","",11,N],[18,"NOCHECKS","","",11,N],[18,"NTVREG","","",11,N],[18,"JITC","","",11,N],[18,"BROWSE","","",11,N],[18,"RELOC","","",11,N],[11,"empty","","Returns an empty set of flags.",11,[[],["amxflags"]]],[11,"all","","Returns the set containing all flags.",11,[[],["amxflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",11,[[["self"]],["u16"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",11,[[["u16"]],["option",["amxflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",11,[[["u16"]],["amxflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",11,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",11,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",11,[[["self"],["amxflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",11,[[["self"],["amxflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",11,[[["self"],["amxflags"]]]],[11,"remove","","Removes the specified flags in-place.",11,[[["self"],["amxflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",11,[[["self"],["amxflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",11,[[["self"],["amxflags"],["bool"]]]],[0,"encoding","samp_sdk","String encoding.",N,N],[7,"WINDOWS_1251","samp_sdk::encoding","The windows-1251 encoding.",N,N],[7,"WINDOWS_1252","","The windows-1252 encoding.",N,N],[5,"set_default_encoding","","",N,[[["encoding"]]]],[0,"error","samp_sdk","Work with AMX errors.",N,N],[4,"AmxError","samp_sdk::error","Error type returned by AMX functions (origin amx_*).",N,N],[13,"Exit","","",12,N],[13,"Assert","","",12,N],[13,"StackError","","",12,N],[13,"Bounds","","",12,N],[13,"MemoryAccess","","",12,N],[13,"InvalidInstruction","","",12,N],[13,"StackLow","","",12,N],[13,"HeapLow","","",12,N],[13,"Callback","","",12,N],[13,"Native","","",12,N],[13,"Divide","","",12,N],[13,"Sleep","","",12,N],[13,"InvalidState","","",12,N],[13,"Memory","","",12,N],[13,"Format","","",12,N],[13,"Version","","",12,N],[13,"NotFound","","",12,N],[13,"Index","","",12,N],[13,"Debug","","",12,N],[13,"Init","","",12,N],[13,"UserData","","",12,N],[13,"InitJit","","",12,N],[13,"Params","","",12,N],[13,"Domain","","",12,N],[13,"General","","",12,N],[13,"Overlay","","",12,N],[13,"Unknown","","",12,N],[6,"AmxResult","","A specialized [`Result`] type for operations on AMX.",N,N],[0,"exports","samp_sdk","Types to get exported functions by AMX.",N,N],[3,"Align16","samp_sdk::exports","",N,N],[3,"Align32","","",N,N],[3,"Allot","","",N,N],[3,"Callback","","",N,N],[3,"Cleanup","","",N,N],[3,"Clone","","",N,N],[3,"Exec","","",N,N],[3,"FindNative","","",N,N],[3,"FindPublic","","",N,N],[3,"FindPubVar","","",N,N],[3,"FindTagId","","",N,N],[3,"Flags","","",N,N],[3,"GetAddr","","",N,N],[3,"GetNative","","",N,N],[3,"GetPublic","","",N,N],[3,"GetPubVar","","",N,N],[3,"GetString","","",N,N],[3,"GetTag","","",N,N],[3,"GetUserData","","",N,N],[3,"Init","","",N,N],[3,"InitJIT","","",N,N],[3,"MemInfo","","",N,N],[3,"NameLength","","",N,N],[3,"NativeInfo","","",N,N],[3,"NumNatives","","",N,N],[3,"NumPublics","","",N,N],[3,"NumPubVars","","",N,N],[3,"NumTags","","",N,N],[3,"Push","","",N,N],[3,"PushArray","","",N,N],[3,"PushString","","",N,N],[3,"RaiseError","","",N,N],[3,"Register","","",N,N],[3,"Release","","",N,N],[3,"SetCallback","","",N,N],[3,"SetDebugHook","","",N,N],[3,"SetString","","",N,N],[3,"SetUserData","","",N,N],[3,"StrLen","","",N,N],[3,"UTF8Check","","",N,N],[3,"UTF8Get","","",N,N],[3,"UTF8Len","","",N,N],[3,"UTF8Put","","",N,N],[4,"Exports","","List of `amx_*` functions exported via the extern `Load`…",N,N],[13,"Align16","","",13,N],[13,"Align32","","",13,N],[13,"Align64","","",13,N],[13,"Allot","","",13,N],[13,"Callback","","",13,N],[13,"Cleanup","","",13,N],[13,"Clone","","",13,N],[13,"Exec","","",13,N],[13,"FindNative","","",13,N],[13,"FindPublic","","",13,N],[13,"FindPubVar","","",13,N],[13,"FindTagId","","",13,N],[13,"Flags","","",13,N],[13,"GetAddr","","",13,N],[13,"GetNative","","",13,N],[13,"GetPublic","","",13,N],[13,"GetPubVar","","",13,N],[13,"GetString","","",13,N],[13,"GetTag","","",13,N],[13,"GetUserData","","",13,N],[13,"Init","","",13,N],[13,"InitJIT","","",13,N],[13,"MemInfo","","",13,N],[13,"NameLength","","",13,N],[13,"NativeInfo","","",13,N],[13,"NumNatives","","",13,N],[13,"NumPublics","","",13,N],[13,"NumPubVars","","",13,N],[13,"NumTags","","",13,N],[13,"Push","","",13,N],[13,"PushArray","","",13,N],[13,"PushString","","",13,N],[13,"RaiseError","","",13,N],[13,"Register","","",13,N],[13,"Release","","",13,N],[13,"SetCallback","","",13,N],[13,"SetDebugHook","","",13,N],[13,"SetString","","",13,N],[13,"SetUserData","","",13,N],[13,"StrLen","","",13,N],[13,"UTF8Check","","",13,N],[13,"UTF8Get","","",13,N],[13,"UTF8Len","","",13,N],[13,"UTF8Put","","",13,N],[8,"Export","","",N,N],[16,"Output","","",14,N],[18,"OFFSET","","",14,N],[10,"from_table","","",14,N],[0,"raw","samp_sdk","Raw C definitions of AMX sturcture.",N,N],[0,"functions","samp_sdk::raw","",N,N],[6,"AmxNative","samp_sdk::raw::functions","",N,N],[6,"AmxCallback","","",N,N],[6,"AmxDebug","","",N,N],[6,"Align16","","",N,N],[6,"Align32","","",N,N],[6,"Allot","","",N,N],[6,"Callback","","",N,N],[6,"Cleanup","","",N,N],[6,"Clone","","",N,N],[6,"Exec","","",N,N],[6,"FindNative","","",N,N],[6,"FindPublic","","",N,N],[6,"FindPubVar","","",N,N],[6,"FindTagId","","",N,N],[6,"Flags","","",N,N],[6,"GetAddr","","",N,N],[6,"GetNative","","",N,N],[6,"GetPublic","","",N,N],[6,"GetPubVar","","",N,N],[6,"GetString","","",N,N],[6,"GetTag","","",N,N],[6,"GetUserData","","",N,N],[6,"Init","","",N,N],[6,"InitJIT","","",N,N],[6,"MemInfo","","",N,N],[6,"NameLength","","",N,N],[6,"NativeInfo","","",N,N],[6,"NumNatives","","",N,N],[6,"NumPublics","","",N,N],[6,"NumPubVars","","",N,N],[6,"NumTags","","",N,N],[6,"Push","","",N,N],[6,"PushArray","","",N,N],[6,"PushString","","",N,N],[6,"RaiseError","","",N,N],[6,"Register","","",N,N],[6,"Release","","",N,N],[6,"SetCallback","","",N,N],[6,"SetDebugHook","","",N,N],[6,"SetString","","",N,N],[6,"SetUserData","","",N,N],[6,"StrLen","","",N,N],[6,"UTF8Check","","",N,N],[6,"UTF8Get","","",N,N],[6,"UTF8Len","","",N,N],[6,"UTF8Put","","",N,N],[6,"Logprintf","","",N,N],[0,"types","samp_sdk::raw","",N,N],[3,"AMX","samp_sdk::raw::types","",N,N],[12,"base","","",15,N],[12,"data","","",15,N],[12,"callback","","",15,N],[12,"debug","","",15,N],[12,"cip","","",15,N],[12,"frm","","",15,N],[12,"hea","","",15,N],[12,"hlw","","",15,N],[12,"stk","","",15,N],[12,"stp","","",15,N],[12,"flags","","",15,N],[12,"usertags","","",15,N],[12,"userdata","","",15,N],[12,"error","","",15,N],[12,"paramcount","","",15,N],[12,"pri","","",15,N],[12,"alt","","",15,N],[12,"reset_stk","","",15,N],[12,"reset_hea","","",15,N],[12,"sysreq_d","","",15,N],[3,"AMX_NATIVE_INFO","","",N,N],[12,"name","","",16,N],[12,"func","","",16,N],[3,"AMX_FUNCSTUB","","",N,N],[12,"address","","",17,N],[12,"name","","",17,N],[3,"ANX_FUNCSTUBNT","","",N,N],[12,"address","","",18,N],[12,"nameofs","","",18,N],[3,"AMX_HEADER","","",N,N],[12,"size","","",19,N],[12,"magic","","",19,N],[12,"file_version","","",19,N],[12,"amx_version","","",19,N],[12,"flags","","",19,N],[12,"defsize","","",19,N],[12,"cod","","",19,N],[12,"dat","","",19,N],[12,"hea","","",19,N],[12,"stp","","",19,N],[12,"cip","","",19,N],[12,"publics","","",19,N],[12,"natives","","",19,N],[12,"libraries","","",19,N],[12,"pubvars","","",19,N],[12,"tags","","",19,N],[12,"nametable","","",19,N],[14,"exec_public","samp_sdk","Execute a public AMX function by name.",N,N],[11,"into","samp_sdk::amx","",0,[[["self"]],["u"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","samp_sdk::args","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","samp_sdk::cell","",7,[[["self"]],["u"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into","samp_sdk::cell::buffer","",3,[[["self"]],["u"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"to_string","samp_sdk::cell::string","",6,[[["self"]],["string"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","samp_sdk::consts","",10,[[["self"]],["u"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"to_string","samp_sdk::error","",12,[[["self"]],["string"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"into","samp_sdk::exports","",20,[[["self"]],["u"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"into","","",60,[[["self"]],["u"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"into","","",61,[[["self"]],["u"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"into","samp_sdk::raw::types","",15,[[["self"]],["u"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"as_cell","samp_sdk::cell::buffer","",3,[[["self"]],["i32"]]],[11,"from_raw","","",4,[[["amx"],["i32"]],["amxresult",["unsizedbuffer"]]]],[11,"as_cell","","",4,[[["self"]],["i32"]]],[11,"from_raw","samp_sdk::cell::string","",6,[[["amx"],["i32"]],["amxresult",["amxstring"]]]],[11,"as_cell","","",6,[[["self"]],["i32"]]],[11,"from_raw","samp_sdk::cell","",7,[[["amx"],["i32"]],["amxresult",["ref"]]]],[11,"as_cell","","",7,[[["self"]],["i32"]]],[11,"from_table","samp_sdk::exports","",20,N],[11,"from_table","","",21,N],[11,"from_table","","",22,N],[11,"from_table","","",23,N],[11,"from_table","","",24,N],[11,"from_table","","",25,N],[11,"from_table","","",26,N],[11,"from_table","","",27,N],[11,"from_table","","",28,N],[11,"from_table","","",29,N],[11,"from_table","","",30,N],[11,"from_table","","",31,N],[11,"from_table","","",32,N],[11,"from_table","","",33,N],[11,"from_table","","",34,N],[11,"from_table","","",35,N],[11,"from_table","","",36,N],[11,"from_table","","",37,N],[11,"from_table","","",38,N],[11,"from_table","","",39,N],[11,"from_table","","",40,N],[11,"from_table","","",41,N],[11,"from_table","","",42,N],[11,"from_table","","",43,N],[11,"from_table","","",44,N],[11,"from_table","","",45,N],[11,"from_table","","",46,N],[11,"from_table","","",47,N],[11,"from_table","","",48,N],[11,"from_table","","",49,N],[11,"from_table","","",50,N],[11,"from_table","","",51,N],[11,"from_table","","",52,N],[11,"from_table","","",53,N],[11,"from_table","","",54,N],[11,"from_table","","",55,N],[11,"from_table","","",56,N],[11,"from_table","","",57,N],[11,"from_table","","",58,N],[11,"from_table","","",59,N],[11,"from_table","","",60,N],[11,"from_table","","",61,N],[11,"from_table","","",62,N],[11,"clone","samp_sdk::consts","",10,[[["self"]],["supports"]]],[11,"clone","","",8,[[["self"]],["serverdata"]]],[11,"clone","","",11,[[["self"]],["amxflags"]]],[11,"clone","","",9,[[["self"]],["amxexecidx"]]],[11,"clone","samp_sdk::exports","",13,[[["self"]],["exports"]]],[11,"eq","samp_sdk::consts","",10,[[["self"],["supports"]],["bool"]]],[11,"ne","","",10,[[["self"],["supports"]],["bool"]]],[11,"eq","","",8,[[["self"],["serverdata"]],["bool"]]],[11,"eq","","",11,[[["self"],["amxflags"]],["bool"]]],[11,"ne","","",11,[[["self"],["amxflags"]],["bool"]]],[11,"eq","","",9,[[["self"],["amxexecidx"]],["bool"]]],[11,"ne","","",9,[[["self"],["amxexecidx"]],["bool"]]],[11,"eq","samp_sdk::exports","",13,[[["self"],["exports"]],["bool"]]],[11,"partial_cmp","samp_sdk::consts","",10,[[["self"],["supports"]],["option",["ordering"]]]],[11,"lt","","",10,[[["self"],["supports"]],["bool"]]],[11,"le","","",10,[[["self"],["supports"]],["bool"]]],[11,"gt","","",10,[[["self"],["supports"]],["bool"]]],[11,"ge","","",10,[[["self"],["supports"]],["bool"]]],[11,"partial_cmp","","",11,[[["self"],["amxflags"]],["option",["ordering"]]]],[11,"lt","","",11,[[["self"],["amxflags"]],["bool"]]],[11,"le","","",11,[[["self"],["amxflags"]],["bool"]]],[11,"gt","","",11,[[["self"],["amxflags"]],["bool"]]],[11,"ge","","",11,[[["self"],["amxflags"]],["bool"]]],[11,"cmp","","",10,[[["self"],["supports"]],["ordering"]]],[11,"cmp","","",11,[[["self"],["amxflags"]],["ordering"]]],[11,"drop","samp_sdk::amx","",1,[[["self"]]]],[11,"from","samp_sdk::consts","",9,[[["i32"]],["amxexecidx"]]],[11,"from","samp_sdk::error","",12,[[["i32"]],["self"]]],[11,"extend","samp_sdk::consts","",10,[[["self"],["t"]]]],[11,"extend","","",11,[[["self"],["t"]]]],[11,"fmt","samp_sdk::amx","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","samp_sdk::cell::buffer","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","samp_sdk::consts","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","samp_sdk::error","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","samp_sdk::exports","",13,[[["self"],["formatter"]],["result"]]],[11,"deref","samp_sdk::cell::buffer","",3,N],[11,"deref","samp_sdk::cell","",7,[[["self"]],["t"]]],[11,"deref_mut","samp_sdk::cell::buffer","",3,N],[11,"deref_mut","samp_sdk::cell","",7,[[["self"]],["t"]]],[11,"hash","samp_sdk::consts","",10,N],[11,"hash","","",11,N],[11,"sub","","Returns the set difference of the two sets of flags.",10,[[["self"],["supports"]],["supports"]]],[11,"sub","","Returns the set difference of the two sets of flags.",11,[[["self"],["amxflags"]],["amxflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",10,[[["self"],["supports"]]]],[11,"sub_assign","","Disables all flags enabled in the set.",11,[[["self"],["amxflags"]]]],[11,"not","","Returns the complement of this set of flags.",10,[[["self"]],["supports"]]],[11,"not","","Returns the complement of this set of flags.",11,[[["self"]],["amxflags"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",10,[[["self"],["supports"]],["supports"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",11,[[["self"],["amxflags"]],["amxflags"]]],[11,"bitor","","Returns the union of the two sets of flags.",10,[[["self"],["supports"]],["supports"]]],[11,"bitor","","Returns the union of the two sets of flags.",11,[[["self"],["amxflags"]],["amxflags"]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",10,[[["self"],["supports"]],["supports"]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",11,[[["self"],["amxflags"]],["amxflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",10,[[["self"],["supports"]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",11,[[["self"],["amxflags"]]]],[11,"bitor_assign","","Adds the set of flags.",10,[[["self"],["supports"]]]],[11,"bitor_assign","","Adds the set of flags.",11,[[["self"],["amxflags"]]]],[11,"bitxor_assign","","Toggles the set of flags.",10,[[["self"],["supports"]]]],[11,"bitxor_assign","","Toggles the set of flags.",11,[[["self"],["amxflags"]]]],[11,"from_iter","","",10,[[["t"]],["supports"]]],[11,"from_iter","","",11,[[["t"]],["amxflags"]]],[11,"fmt","samp_sdk::cell::string","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","samp_sdk::error","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","samp_sdk::consts","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"Amx"],[3,"Allocator"],[3,"Args"],[3,"Buffer"],[3,"UnsizedBuffer"],[8,"AmxCell"],[3,"AmxString"],[3,"Ref"],[4,"ServerData"],[4,"AmxExecIdx"],[3,"Supports"],[3,"AmxFlags"],[4,"AmxError"],[4,"Exports"],[8,"Export"],[3,"AMX"],[3,"AMX_NATIVE_INFO"],[3,"AMX_FUNCSTUB"],[3,"ANX_FUNCSTUBNT"],[3,"AMX_HEADER"],[3,"Align16"],[3,"Align32"],[3,"Allot"],[3,"Callback"],[3,"Cleanup"],[3,"Clone"],[3,"Exec"],[3,"FindNative"],[3,"FindPublic"],[3,"FindPubVar"],[3,"FindTagId"],[3,"Flags"],[3,"GetAddr"],[3,"GetNative"],[3,"GetPublic"],[3,"GetPubVar"],[3,"GetString"],[3,"GetTag"],[3,"GetUserData"],[3,"Init"],[3,"InitJIT"],[3,"MemInfo"],[3,"NameLength"],[3,"NativeInfo"],[3,"NumNatives"],[3,"NumPublics"],[3,"NumPubVars"],[3,"NumTags"],[3,"Push"],[3,"PushArray"],[3,"PushString"],[3,"RaiseError"],[3,"Register"],[3,"Release"],[3,"SetCallback"],[3,"SetDebugHook"],[3,"SetString"],[3,"SetUserData"],[3,"StrLen"],[3,"UTF8Check"],[3,"UTF8Get"],[3,"UTF8Len"],[3,"UTF8Put"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);
